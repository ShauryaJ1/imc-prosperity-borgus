Sandbox logs:
{
  "sandboxLog": "",
  "lambdaLog": "[[0,\"\",[[\"RAINFOREST_RESIN\",\"RAINFOREST_RESIN\",1],[\"SQUID_INK\",\"SQUID_INK\",1],[\"KELP\",\"KELP\",1]],{\"KELP\":[{\"2028\":23},{\"2032\":-23}],\"RAINFOREST_RESIN\":[{\"9998\":9,\"9995\":23},{\"10005\":-23}],\"SQUID_INK\":[{\"1968\":23},{\"1971\":-23}]},[],[],{},[{},{}]],[[\"RAINFOREST_RESIN\",9998,50],[\"RAINFOREST_RESIN\",10004,-50],[\"KELP\",2029,50],[\"KELP\",2031,-50],[\"SQUID_INK\",1969,50],[\"SQUID_INK\",1970,-50]],1,\"\",\"\"]",
  "timestamp": 0
}
{
  "sandboxLog": "",
  "lambdaLog": "[[100,\"{\\\"kelp_last_price\\\": 2030.0, \\\"ink_last_price\\\": 1969.5}\",[[\"RAINFOREST_RESIN\",\"RAINFOREST_RESIN\",1],[\"SQUID_INK\",\"SQUID_INK\",1],[\"KELP\",\"KELP\",1]],{\"KELP\":[{\"2030\":2,\"2028\":22},{\"2032\":-22}],\"RAINFOREST_RESIN\":[{\"10000\":2,\"9998\":4,\"9996\":1,\"9995\":21},{\"10004\":-1,\"10005\":-21}],\"SQUID_INK\":[{\"1969\":2,\"1967\":22},{\"1971\":-22}]},[],[],{},[{},{}]],[[\"RAINFOREST_RESIN\",10002,-1],[\"RAINFOREST_RESIN\",9998,50],[\"RAINFOREST_RESIN\",10003,-49],[\"KELP\",2031,-1],[\"KELP\",2029,50],[\"KELP\",2031,-49],[\"SQUID_INK\",1970,-1],[\"SQUID_INK\",1968,50],[\"SQUID_INK\",1970,-49]],1,\"{\\\"kelp_last_price\\\": 2030.0, \\\"ink_last_price\\\": 1969.5}\",\"\"]",
  "timestamp": 100
}
{
  "sandboxLog": "",
  "lambdaLog": "[[200,\"{\\\"kelp_last_price\\\": 2030.0, \\\"ink_last_price\\\": 1969.0}\",[[\"RAINFOREST_RESIN\",\"RAINFOREST_RESIN\",1],[\"SQUID_INK\",\"SQUID_INK\",1],[\"KELP\",\"KELP\",1]],{\"KELP\":[{\"2029\":1,\"2028\":21},{\"2032\":-22}],\"RAINFOREST_RESIN\":[{\"9996\":1,\"9995\":21},{\"10004\":-1,\"10005\":-21}],\"SQUID_INK\":[{\"1966\":1,\"1965\":21},{\"1969\":-22}]},[[\"RAINFOREST_RESIN\",10002.0,1,\"\",\"SUBMISSION\",100],[\"SQUID_INK\",1970.0,1,\"\",\"SUBMISSION\",100],[\"KELP\",2031.0,1,\"\",\"SUBMISSION\",100]],[],{\"KELP\":-1,\"RAINFOREST_RESIN\":-1,\"SQUID_INK\":-1},[{},{}]],[[\"RAINFOREST_RESIN\",9997,51],[\"RAINFOREST_RESIN\",10003,-49],[\"KELP\",2029,51],[\"KELP\",2031,-49],[\"SQUID_INK\",1966,51],[\"SQUID_INK\",1968,-49]],1,\"{\\\"kelp_last_price\\\": 2030.0, \\\"ink_last_price\\\": 1969.0}\",\"\"]",
  "timestamp": 200
}
{
  "sandboxLog": "",
  "lambdaLog": "[[300,\"{\\\"kelp_last_price\\\": 2030.0, \\\"ink_last_price\\\": 1967.0}\",[[\"RAINFOREST_RESIN\",\"RAINFOREST_RESIN\",1],[\"SQUID_INK\",\"SQUID_INK\",1],[\"KELP\",\"KELP\",1]],{\"KELP\":[{\"2031\":1,\"2029\":26},{\"2032\":-26}],\"RAINFOREST_RESIN\":[{\"9995\":26},{\"10005\":-26}],\"SQUID_INK\":[{\"1967\":1,\"1965\":26},{\"1968\":-26}]},[[\"RAINFOREST_RESIN\",10003.0,1,\"\",\"SUBMISSION\",200],[\"SQUID_INK\",1968.0,1,\"\",\"SUBMISSION\",200],[\"KELP\",2031.0,1,\"\",\"SUBMISSION\",200]],[],{\"KELP\":-2,\"RAINFOREST_RESIN\":-2,\"SQUID_INK\":-2},[{},{}]],[[\"RAINFOREST_RESIN\",9996,52],[\"RAINFOREST_RESIN\",10004,-48],[\"KELP\",2030,52],[\"KELP\",2031,-48],[\"SQUID_INK\",1966,52],[\"SQUID_INK\",1967,-48]],1,\"{\\\"kelp_last_price\\\": 2030.0, \\\"ink_last_price\\\": 1967.0}\",\"\"]",
  "timestamp": 300
}
{
  "sandboxLog": "",
  "lambdaLog": "[[400,\"{\\\"kelp_last_price\\\": 2030.3854717980296, \\\"ink_last_price\\\": 1966.5}\",[[\"RAINFOREST_RESIN\",\"RAINFOREST_RESIN\",1],[\"SQUID_INK\",\"SQUID_INK\",1],[\"KELP\",\"KELP\",1]],{\"KELP\":[{\"2029\":2,\"2028\":26},{\"2032\":-28}],\"RAINFOREST_RESIN\":[{\"9998\":8,\"9996\":2,\"9995\":26},{\"10004\":-2,\"10005\":-26}],\"SQUID_INK\":[{\"1966\":28},{\"1969\":-28}]},[[\"RAINFOREST_RESIN\",10003.0,1,\"\",\"SUBMISSION\",200],[\"SQUID_INK\",1967.0,1,\"\",\"SUBMISSION\",300],[\"KELP\",2031.0,1,\"\",\"SUBMISSION\",300]],[],{\"KELP\":-3,\"RAINFOREST_RESIN\":-2,\"SQUID_INK\":-3},[{},{}]],[[\"RAINFOREST_RESIN\",9998,52],[\"RAINFOREST_RESIN\",10003,-48],[\"KELP\",2030,53],[\"KELP\",2031,-47],[\"SQUID_INK\",1967,53],[\"SQUID_INK\",1968,-47]],1,\"{\\\"kelp_last_price\\\": 2030.3854717980296, \\\"ink_last_price\\\": 1966.5}\",\"\"]",
  "timestamp": 400
}
{
  "sandboxLog": "",
  "lambdaLog": "[[500,\"{\\\"kelp_last_price\\\": {\\\"py/reduce\\\": [{\\\"py/function\\\": \\\"numpy.core.multiarray.scalar\\\"}, {\\\"py/tuple\\\": [{\\\"py/reduce\\\": [{\\\"py/type\\\": \\\"numpy.dtype\\\"}, {\\\"py/tuple\\\": [\\\"f8\\\", false, true]}, {\\\"py/tuple\\\": [3, \\\"<\\\", null, null, null, -1, -1, 0]}]}, {\\\"py/b64\\\": \\\"DsmtUam4n0A=\\\"}]}]}, \\\"ink_last_price\\\": 1967.5}\",[[\"RAINFOREST_RESIN\",\"RAINFOREST_RESIN\",1],[\"SQUID_INK\",\"SQUID_INK\",1],[\"KELP\",\"KELP\",1]],{\"KELP\":[{\"2028\":24},{\"2030\":-3,\"2031\":-24}],\"RAINFOREST_RESIN\":[{\"9998\":8,\"9996\":1,\"9995\":23},{\"10004\":-1,\"10005\":-23}],\"SQUID_INK\":[{\"1966\":24},{\"1968\":-3,\"1970\":-24}]},[[\"RAINFOREST_RESIN\",10003.0,1,\"\",\"SUBMISSION\",200],[\"SQUID_INK\",1967.0,1,\"\",\"SUBMISSION\",300],[\"KELP\",2031.0,1,\"\",\"SUBMISSION\",300]],[[\"SQUID_INK\",1969.0,1,\"\",\"\",500],[\"KELP\",2030.0,1,\"\",\"\",500]],{\"KELP\":-3,\"RAINFOREST_RESIN\":-2,\"SQUID_INK\":-3},[{},{}]],[[\"RAINFOREST_RESIN\",9998,52],[\"RAINFOREST_RESIN\",10003,-48],[\"KELP\",2030,3],[\"KELP\",2029,50],[\"KELP\",2030,-47],[\"SQUID_INK\",1967,53],[\"SQUID_INK\",1969,-47]],1,\"{\\\"kelp_last_price\\\": {\\\"py/reduce\\\": [{\\\"py/function\\\": \\\"numpy.core.multiarray.scalar\\\"}, {\\\"py/tuple\\\": [{\\\"py/reduce\\\": [{\\\"py/type\\\": \\\"numpy.dtype\\\"}, {\\\"py/tuple\\\": [\\\"f8\\\", false, true]}, {\\\"py/tuple\\\": [3, \\\"<\\\", null, null, null, -1, -1, 0]}]}, {\\\"py/b64\\\": \\\"DsmtUam4n0A=\\\"}]}]}, \\\"ink_last_price\\\": 1967.5}\",\"\"]",
  "timestamp": 500
}
{
  "sandboxLog": "",
  "lambdaLog": "[[600,\"{\\\"kelp_last_price\\\": {\\\"py/reduce\\\": [{\\\"py/function\\\": \\\"numpy.core.multiarray.scalar\\\"}, {\\\"py/tuple\\\": [{\\\"py/reduce\\\": [{\\\"py/type\\\": \\\"numpy.dtype\\\"}, {\\\"py/tuple\\\": [\\\"f8\\\", false, true]}, {\\\"py/tuple\\\": [3, \\\"<\\\", null, null, null, -1, -1, 0]}]}, {\\\"py/b64\\\": \\\"762x1b22n0A=\\\"}]}]}, \\\"ink_last_price\\\": 1968.0}\",[[\"RAINFOREST_RESIN\",\"RAINFOREST_RESIN\",1],[\"SQUID_INK\",\"SQUID_INK\",1],[\"KELP\",\"KELP\",1]],{\"KELP\":[{\"2030\":5,\"2028\":30},{\"2031\":-30}],\"RAINFOREST_RESIN\":[{\"9996\":2,\"9995\":28},{\"10004\":-2,\"10005\":-28}],\"SQUID_INK\":[{\"1967\":5,\"1965\":30},{\"1968\":-30}]},[[\"RAINFOREST_RESIN\",10003.0,1,\"\",\"SUBMISSION\",200],[\"SQUID_INK\",1967.0,1,\"\",\"SUBMISSION\",300],[\"KELP\",2030.0,3,\"SUBMISSION\",\"\",500]],[[\"SQUID_INK\",1969.0,1,\"\",\"\",500],[\"KELP\",2030.0,1,\"\",\"\",500]],{\"KELP\":0,\"RAINFOREST_RESIN\":-2,\"SQUID_INK\":-3},[{},{}]],[[\"RAINFOREST_RESIN\",9997,52],[\"RAINFOREST_RESIN\",10003,-48],[\"KELP\",2029,50],[\"KELP\",2030,-50],[\"SQUID_INK\",1966,53],[\"SQUID_INK\",1967,-47]],1,\"{\\\"kelp_last_price\\\": {\\\"py/reduce\\\": [{\\\"py/function\\\": \\\"numpy.core.multiarray.scalar\\\"}, {\\\"py/tuple\\\": [{\\\"py/reduce\\\": [{\\\"py/type\\\": \\\"numpy.dtype\\\"}, {\\\"py/tuple\\\": [\\\"f8\\\", false, true]}, {\\\"py/tuple\\\": [3, \\\"<\\\", null, null, null, -1, -1, 0]}]}, {\\\"py/b64\\\": \\\"762x1b22n0A=\\\"}]}]}, \\\"ink_last_price\\\": 1968.0}\",\"\"]",
  "timestamp": 600
}
{
  "sandboxLog": "",
  "lambdaLog": "[[700,\"{\\\"kelp_last_price\\\": {\\\"py/reduce\\\": [{\\\"py/function\\\": \\\"numpy.core.multiarray.scalar\\\"}, {\\\"py/tuple\\\": [{\\\"py/reduce\\\": [{\\\"py/type\\\": \\\"numpy.dtype\\\"}, {\\\"py/tuple\\\": [\\\"f8\\\", false, true]}, {\\\"py/tuple\\\": [3, \\\"<\\\", null, null, null, -1, -1, 0]}]}, {\\\"py/b64\\\": \\\"2qMrF5y1n0A=\\\"}]}]}, \\\"ink_last_price\\\": 1966.5}\",[[\"RAINFOREST_RESIN\",\"RAINFOREST_RESIN\",1],[\"SQUID_INK\",\"SQUID_INK\",1],[\"KELP\",\"KELP\",1]],{\"KELP\":[{\"2028\":22},{\"2032\":-23}],\"RAINFOREST_RESIN\":[{\"9996\":1,\"9995\":22},{\"10004\":-1,\"10005\":-22}],\"SQUID_INK\":[{\"1967\":22},{\"1970\":-23}]},[[\"RAINFOREST_RESIN\",10003.0,1,\"\",\"SUBMISSION\",200],[\"SQUID_INK\",1967.0,5,\"\",\"SUBMISSION\",600],[\"SQUID_INK\",1966.0,14,\"SUBMISSION\",\"\",600],[\"KELP\",2030.0,5,\"\",\"SUBMISSION\",600],[\"KELP\",2029.0,14,\"SUBMISSION\",\"\",600]],[[\"SQUID_INK\",1967.0,1,\"\",\"\",700],[\"KELP\",2028.0,1,\"\",\"\",700]],{\"KELP\":9,\"RAINFOREST_RESIN\":-2,\"SQUID_INK\":6},[{},{}]],[[\"RAINFOREST_RESIN\",9997,52],[\"RAINFOREST_RESIN\",10003,-48],[\"KELP\",2029,41],[\"KELP\",2031,-59],[\"SQUID_INK\",1968,44],[\"SQUID_INK\",1969,-56]],1,\"{\\\"kelp_last_price\\\": {\\\"py/reduce\\\": [{\\\"py/function\\\": \\\"numpy.core.multiarray.scalar\\\"}, {\\\"py/tuple\\\": [{\\\"py/reduce\\\": [{\\\"py/type\\\": \\\"numpy.dtype\\\"}, {\\\"py/tuple\\\": [\\\"f8\\\", false, true]}, {\\\"py/tuple\\\": [3, \\\"<\\\", null, null, null, -1, -1, 0]}]}, {\\\"py/b64\\\": \\\"2qMrF5y1n0A=\\\"}]}]}, \\\"ink_last_price\\\": 1966.5}\",\"\"]",
  "timestamp": 700
}
{
  "sandboxLog": "",
  "lambdaLog": "[[800,\"{\\\"kelp_last_price\\\": {\\\"py/reduce\\\": [{\\\"py/function\\\": \\\"numpy.core.multiarray.scalar\\\"}, {\\\"py/tuple\\\": [{\\\"py/reduce\\\": [{\\\"py/type\\\": \\\"numpy.dtype\\\"}, {\\\"py/tuple\\\": [\\\"f8\\\", false, true]}, {\\\"py/tuple\\\": [3, \\\"<\\\", null, null, null, -1, -1, 0]}]}, {\\\"py/b64\\\": \\\"Zhj0lde2n0A=\\\"}]}]}, \\\"ink_last_price\\\": 1968.5}\",[[\"RAINFOREST_RESIN\",\"RAINFOREST_RESIN\",1],[\"SQUID_INK\",\"SQUID_INK\",1],[\"KELP\",\"KELP\",1]],{\"KELP\":[{\"2028\":25},{\"2030\":-3,\"2032\":-25}],\"RAINFOREST_RESIN\":[{\"9996\":1,\"9995\":24},{\"10000\":-3,\"10004\":-1,\"10005\":-24}],\"SQUID_INK\":[{\"1967\":25},{\"1968\":-3,\"1970\":-25}]},[[\"RAINFOREST_RESIN\",10003.0,1,\"\",\"SUBMISSION\",200],[\"SQUID_INK\",1967.0,5,\"\",\"SUBMISSION\",600],[\"SQUID_INK\",1966.0,14,\"SUBMISSION\",\"\",600],[\"KELP\",2030.0,5,\"\",\"SUBMISSION\",600],[\"KELP\",2029.0,14,\"SUBMISSION\",\"\",600]],[[\"SQUID_INK\",1967.0,1,\"\",\"\",700],[\"KELP\",2028.0,1,\"\",\"\",700]],{\"KELP\":9,\"RAINFOREST_RESIN\":-2,\"SQUID_INK\":6},[{},{}]],[[\"RAINFOREST_RESIN\",10000,2],[\"RAINFOREST_RESIN\",9997,50],[\"RAINFOREST_RESIN\",10003,-48],[\"KELP\",2029,41],[\"KELP\",2031,-59],[\"SQUID_INK\",1968,44],[\"SQUID_INK\",1969,-56]],1,\"{\\\"kelp_last_price\\\": {\\\"py/reduce\\\": [{\\\"py/function\\\": \\\"numpy.core.multiarray.scalar\\\"}, {\\\"py/tuple\\\": [{\\\"py/reduce\\\": [{\\\"py/type\\\": \\\"numpy.dtype\\\"}, {\\\"py/tuple\\\": [\\\"f8\\\", false, true]}, {\\\"py/tuple\\\": [3, \\\"<\\\", null, null, null, -1, -1, 0]}]}, {\\\"py/b64\\\": \\\"Zhj0lde2n0A=\\\"}]}]}, \\\"ink_last_price\\\": 1968.5}\",\"\"]",
  "timestamp": 800
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"acd7c31a-950d-40db-8823-bb0c3696668f\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"acd7c31a-950d-40db-8823-bb0c3696668f\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 900
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"dd2c0a47-c925-4a1d-8fb3-2feac6ae7c07\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"dd2c0a47-c925-4a1d-8fb3-2feac6ae7c07\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 1000
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"a0d483a1-8d64-4913-8dbe-d211830ee5b0\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"a0d483a1-8d64-4913-8dbe-d211830ee5b0\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 1100
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"8471badb-614b-4277-b7a4-b1970191d261\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"8471badb-614b-4277-b7a4-b1970191d261\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 1200
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"f136cc1a-9e54-49ff-8dba-d5b135b19a67\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"f136cc1a-9e54-49ff-8dba-d5b135b19a67\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 1300
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"4e795b3a-47a0-4e4b-9e7e-817bd3e1dc3d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"4e795b3a-47a0-4e4b-9e7e-817bd3e1dc3d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 1400
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"74d92645-0c8f-4170-b319-a1e1964ee4fe\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"74d92645-0c8f-4170-b319-a1e1964ee4fe\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 1500
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"38636c85-3e99-4c0c-bbad-c600e81f02f8\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"38636c85-3e99-4c0c-bbad-c600e81f02f8\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 1600
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"3878553b-7f6a-4e32-8739-aa21cec72ca7\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"3878553b-7f6a-4e32-8739-aa21cec72ca7\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 1700
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"acc2b4ab-bc01-4d47-9664-6a8a6073a6ac\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"acc2b4ab-bc01-4d47-9664-6a8a6073a6ac\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 1800
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"8c8d4f48-08c2-4d8c-b834-c715cab50c24\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"8c8d4f48-08c2-4d8c-b834-c715cab50c24\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 1900
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"ecd278dd-ca03-45c7-956e-5d50e1991f0a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"ecd278dd-ca03-45c7-956e-5d50e1991f0a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 2000
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"8102aed2-9d74-40a7-a698-a6ab35b57f3d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"8102aed2-9d74-40a7-a698-a6ab35b57f3d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 2100
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"537058a4-9793-4681-a7d0-3a22bdf2bff9\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"537058a4-9793-4681-a7d0-3a22bdf2bff9\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 2200
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"c2d9b60b-af38-40b3-a0d3-c1d527b86f8b\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"c2d9b60b-af38-40b3-a0d3-c1d527b86f8b\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 2300
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"93003196-5905-42fc-a55f-07c3c4b252e2\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"93003196-5905-42fc-a55f-07c3c4b252e2\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 2400
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"695a89d4-98aa-43c0-8733-1d2ebbb32074\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"695a89d4-98aa-43c0-8733-1d2ebbb32074\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 2500
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"13c70bec-3611-4fb7-aea8-e8ad83e58648\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"13c70bec-3611-4fb7-aea8-e8ad83e58648\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 2600
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"948ae441-f14a-41c8-a44e-8420e1baf0f9\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"948ae441-f14a-41c8-a44e-8420e1baf0f9\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 2700
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"a0f6db3d-545b-4e5b-9280-874dc8fecabe\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"a0f6db3d-545b-4e5b-9280-874dc8fecabe\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 2800
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"9e539a5d-d1fb-4c3f-b569-b3da73142066\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"9e539a5d-d1fb-4c3f-b569-b3da73142066\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 2900
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"3965c3ca-61e6-47e5-ae94-5ec547364a58\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"3965c3ca-61e6-47e5-ae94-5ec547364a58\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 3000
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"a85ebec5-ab7e-4342-8cef-ca4e57fc6b10\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"a85ebec5-ab7e-4342-8cef-ca4e57fc6b10\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 3100
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"ce1700b2-4777-494f-932b-49829e53b6d9\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"ce1700b2-4777-494f-932b-49829e53b6d9\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 3200
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"bda460bf-5f3e-44b7-bb4b-2d72adb3e774\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"bda460bf-5f3e-44b7-bb4b-2d72adb3e774\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 3300
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"57b6b2d9-a954-4868-9ee0-ccbeca5cf0b3\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"57b6b2d9-a954-4868-9ee0-ccbeca5cf0b3\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 3400
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"0519259b-e75f-41f6-ab1d-183b01d237d6\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"0519259b-e75f-41f6-ab1d-183b01d237d6\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 3500
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"736ed1f8-3f4f-4bc2-a0bd-bd6b4f405099\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"736ed1f8-3f4f-4bc2-a0bd-bd6b4f405099\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 3600
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"dfc74115-1033-4494-935d-cec4f8785105\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"dfc74115-1033-4494-935d-cec4f8785105\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 3700
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"6eb8cf52-7e79-4038-9842-4f867a6f1153\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"6eb8cf52-7e79-4038-9842-4f867a6f1153\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 3800
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"8e06d6e6-6082-4f2e-b655-fcba4b9ec4bb\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"8e06d6e6-6082-4f2e-b655-fcba4b9ec4bb\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 3900
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"4f743fd7-fc2f-4a54-8ea2-9993eb019631\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"4f743fd7-fc2f-4a54-8ea2-9993eb019631\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 4000
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"d5ef2d21-180b-4c2a-832f-0c5b04a4725a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"d5ef2d21-180b-4c2a-832f-0c5b04a4725a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 4100
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"a18818ab-dfeb-4f9e-8852-75ebe95af68e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"a18818ab-dfeb-4f9e-8852-75ebe95af68e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 4200
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"50e9b936-56bf-4d1e-9c8f-a98a86d187b1\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"50e9b936-56bf-4d1e-9c8f-a98a86d187b1\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 4300
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"68a421fc-30a7-49e8-8eaf-767e9f0fa7ce\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"68a421fc-30a7-49e8-8eaf-767e9f0fa7ce\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 4400
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"0baf9fcc-2c18-46cf-b279-a467154a7bd9\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"0baf9fcc-2c18-46cf-b279-a467154a7bd9\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 4500
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"cb8be062-d8d9-490d-9ebc-6a9a52c5e8f5\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"cb8be062-d8d9-490d-9ebc-6a9a52c5e8f5\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 4600
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"78f31e7b-4186-421a-98ec-b7a85abaa23c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"78f31e7b-4186-421a-98ec-b7a85abaa23c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 4700
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"52e8d171-59a3-403e-906d-e81c34bcca77\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"52e8d171-59a3-403e-906d-e81c34bcca77\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 4800
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"62b0b168-4b78-4d12-b899-192566b0fc13\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"62b0b168-4b78-4d12-b899-192566b0fc13\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 4900
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"16d03161-32c0-49c1-9ad4-e43501b3e784\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"16d03161-32c0-49c1-9ad4-e43501b3e784\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 5000
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"72239a7c-7364-4500-bfc7-01a93b1c1edd\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"72239a7c-7364-4500-bfc7-01a93b1c1edd\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 5100
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"00b6b02c-1865-4718-8c74-251431a0e2a4\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"00b6b02c-1865-4718-8c74-251431a0e2a4\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 5200
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"abd2c0e9-26ad-44fc-a412-bb8fbf24015c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"abd2c0e9-26ad-44fc-a412-bb8fbf24015c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 5300
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"75d4bc7f-ec26-4689-a39a-846036c0e607\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"75d4bc7f-ec26-4689-a39a-846036c0e607\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 5400
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"5bf1b3ed-90af-4cfa-9041-e07713f0b05f\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"5bf1b3ed-90af-4cfa-9041-e07713f0b05f\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 5500
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"4d553ccb-1305-40b3-8580-0c6f41c09576\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"4d553ccb-1305-40b3-8580-0c6f41c09576\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 5600
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"097ef631-1a98-4e4e-8fb0-9805e233820b\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"097ef631-1a98-4e4e-8fb0-9805e233820b\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 5700
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"8cb41900-d3ec-4537-ba91-cd098f76c0cd\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"8cb41900-d3ec-4537-ba91-cd098f76c0cd\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 5800
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"1c27af38-1bbf-40d6-b698-5e7a7fdc67f0\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"1c27af38-1bbf-40d6-b698-5e7a7fdc67f0\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 5900
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"16a122cc-54a1-4df4-95e2-aa45781fad49\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"16a122cc-54a1-4df4-95e2-aa45781fad49\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 6000
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"9b16511e-e383-4243-b3cb-7952b7f3bcd1\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"9b16511e-e383-4243-b3cb-7952b7f3bcd1\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 6100
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"91e01569-77ef-407a-a90d-0a87d5a30e24\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"91e01569-77ef-407a-a90d-0a87d5a30e24\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 6200
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"a3722088-75d6-4789-9531-a0340c0f16c4\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"a3722088-75d6-4789-9531-a0340c0f16c4\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 6300
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"cc113e7e-35d8-4beb-8a79-65a762aa9f8f\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"cc113e7e-35d8-4beb-8a79-65a762aa9f8f\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 6400
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"3993beb2-b372-4de2-985a-620d4b243665\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"3993beb2-b372-4de2-985a-620d4b243665\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 6500
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"8ded6b9b-b593-4bbd-9c97-1dfd437d7b03\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"8ded6b9b-b593-4bbd-9c97-1dfd437d7b03\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 6600
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"fdbff83f-d8c0-429b-964f-4c4b197839e3\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"fdbff83f-d8c0-429b-964f-4c4b197839e3\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 6700
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"405d349d-27dc-46a2-8250-7bf27e1bdafe\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"405d349d-27dc-46a2-8250-7bf27e1bdafe\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 6800
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"c4fdc58d-4512-407e-80bb-5f5b1d498315\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"c4fdc58d-4512-407e-80bb-5f5b1d498315\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 6900
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"76a89e9c-40c0-4413-98e5-16d15850b9eb\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"76a89e9c-40c0-4413-98e5-16d15850b9eb\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 7000
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"6495c6e1-0dc8-4373-8183-325e2d769405\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"6495c6e1-0dc8-4373-8183-325e2d769405\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 7100
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"81a4956c-658d-4799-a509-dac81952d0fb\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"81a4956c-658d-4799-a509-dac81952d0fb\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 7200
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"bc905ca8-50a9-49b3-9f0a-63739c1f59c1\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"bc905ca8-50a9-49b3-9f0a-63739c1f59c1\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 7300
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"9ef6e973-1526-4226-bde7-ca76b818a625\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"9ef6e973-1526-4226-bde7-ca76b818a625\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 7400
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"0a243fac-9049-4e23-9ffb-6d672dcb3692\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"0a243fac-9049-4e23-9ffb-6d672dcb3692\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 7500
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"f5366814-1ba2-4703-990a-0f3a228d4462\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"f5366814-1ba2-4703-990a-0f3a228d4462\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 7600
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"c8db4160-3b6e-446e-a391-d73a617458a5\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"c8db4160-3b6e-446e-a391-d73a617458a5\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 7700
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"2fb86c55-5cbc-44cf-bee8-6debd5008186\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"2fb86c55-5cbc-44cf-bee8-6debd5008186\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 7800
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"1cb3d67c-2a84-46ab-8666-9feff1fece7d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"1cb3d67c-2a84-46ab-8666-9feff1fece7d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 7900
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"01c5332b-0519-491d-b48c-c641df8a769f\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"01c5332b-0519-491d-b48c-c641df8a769f\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 8000
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"5488f3ea-3fa5-4cbe-9761-f055da97e173\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"5488f3ea-3fa5-4cbe-9761-f055da97e173\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 8100
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"fa5781d3-d9c1-4377-b813-7b3d63de2420\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"fa5781d3-d9c1-4377-b813-7b3d63de2420\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 8200
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"1157c69e-c2b8-4155-9261-df28e9e724ca\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"1157c69e-c2b8-4155-9261-df28e9e724ca\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 8300
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"f1818536-38da-4769-bf88-977dbd217703\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"f1818536-38da-4769-bf88-977dbd217703\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 8400
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"4bda1241-22ff-4d76-a093-55c12dbe17f1\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"4bda1241-22ff-4d76-a093-55c12dbe17f1\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 8500
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"2ce1f063-d6d2-4691-9a31-98703eda3dfc\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"2ce1f063-d6d2-4691-9a31-98703eda3dfc\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 8600
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"05a2e2b8-ace4-428f-ad8a-6c5bb9df3232\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"05a2e2b8-ace4-428f-ad8a-6c5bb9df3232\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 8700
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"06ffa55d-a30a-421d-92df-85ac39bae557\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"06ffa55d-a30a-421d-92df-85ac39bae557\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 8800
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"eca454c4-bc4e-426d-b0cb-8c6daecda72e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"eca454c4-bc4e-426d-b0cb-8c6daecda72e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 8900
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"aa225876-8834-48e8-8f92-085a41c72719\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"aa225876-8834-48e8-8f92-085a41c72719\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 9000
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"602a783f-8c01-4609-a975-567dc6ddf0f1\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"602a783f-8c01-4609-a975-567dc6ddf0f1\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 9100
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"b72fd645-8e75-4963-9bc5-b4b599bcc670\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"b72fd645-8e75-4963-9bc5-b4b599bcc670\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 9200
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"6bf25e9b-5877-4305-9fad-eb16c5c86249\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"6bf25e9b-5877-4305-9fad-eb16c5c86249\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 9300
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"ea4bbe95-4ff2-451a-a8a8-dbeb6f5c07f9\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"ea4bbe95-4ff2-451a-a8a8-dbeb6f5c07f9\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 9400
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"6cb39702-47d5-423c-b501-8d9fab492018\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"6cb39702-47d5-423c-b501-8d9fab492018\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 9500
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"c64b5014-b75a-4396-b7c8-7e24afebb24d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"c64b5014-b75a-4396-b7c8-7e24afebb24d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 9600
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"b2112188-7549-497e-8eb7-b596df9bcd61\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"b2112188-7549-497e-8eb7-b596df9bcd61\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 9700
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"be341bd5-6241-4e97-8742-b2b430e17e30\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"be341bd5-6241-4e97-8742-b2b430e17e30\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 9800
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"204f51b1-e38d-47ac-9df3-83b031ba5bdf\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"204f51b1-e38d-47ac-9df3-83b031ba5bdf\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 9900
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"9a7ed7e8-4541-43bf-8e10-c0e00d1dc7c1\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"9a7ed7e8-4541-43bf-8e10-c0e00d1dc7c1\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 10000
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"d37ffaf0-7dea-49bc-b168-5addc8b2b32f\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"d37ffaf0-7dea-49bc-b168-5addc8b2b32f\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 10100
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"965bf942-5a92-47d4-9d20-286254e977ef\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"965bf942-5a92-47d4-9d20-286254e977ef\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 10200
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"ed9e495e-4aa0-4754-9015-0fe3e3b9e01f\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"ed9e495e-4aa0-4754-9015-0fe3e3b9e01f\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 10300
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"6e510ddc-1006-4d3b-9ad9-f51ff61c7ea5\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"6e510ddc-1006-4d3b-9ad9-f51ff61c7ea5\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 10400
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"897b8d33-4583-4b03-a005-9f1f7bf23b2e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"897b8d33-4583-4b03-a005-9f1f7bf23b2e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 10500
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"d69d6ecc-7819-4f44-80b4-5a22be8e1d15\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"d69d6ecc-7819-4f44-80b4-5a22be8e1d15\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 10600
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"45967390-f254-47ea-b34b-afba31a1723e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"45967390-f254-47ea-b34b-afba31a1723e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 10700
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"e53177fd-16b5-471a-8986-eb986092efcb\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"e53177fd-16b5-471a-8986-eb986092efcb\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 10800
}
{
  "sandboxLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"b1729025-1633-4ce2-a49e-5f98ab82e49a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "lambdaLog": "[ERROR] TypeError: unsupported operand type(s) for ^: 'float' and 'int'\\n{\"errorMessage\": \"unsupported operand type(s) for ^: 'float' and 'int'\", \"errorType\": \"TypeError\", \"requestId\": \"b1729025-1633-4ce2-a49e-5f98ab82e49a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 785, in run\\n    ink_make_orders, _, _ = self.make_orders(\\n\", \"  File \\\"/var/task/trader.py\\\", line 610, in make_orders\\n    long_ema= (1-beta)/(1-beta^(self.params[Product.SQUID_INK][\\\"history_window\\\"]+1)) * fair_value + (1 - beta) * sum(beta**(i+1) * price_history[-i- 1] for i in range(len(price_history)))\\n\"]}",
  "timestamp": 10900
}
{
  "sandboxLog": "Lambda errors have reached maximum value for submission 7aa3adde-af48-48a7-b2e2-803ff97d903e",
  "lambdaLog": null,
  "timestamp": 114874
}



Activities log:
day;timestamp;product;bid_price_1;bid_volume_1;bid_price_2;bid_volume_2;bid_price_3;bid_volume_3;ask_price_1;ask_volume_1;ask_price_2;ask_volume_2;ask_price_3;ask_volume_3;mid_price;profit_and_loss
0;0;RAINFOREST_RESIN;9998;9;9995;23;;;10005;23;;;;;10001.5;0.0
0;0;KELP;2028;23;;;;;2032;23;;;;;2030.0;0.0
0;0;SQUID_INK;1968;23;;;;;1971;23;;;;;1969.5;0.0
0;100;SQUID_INK;1970;1;1969;2;1967;22;1971;22;;;;;1970.5;0.0
0;100;KELP;2031;1;2030;2;2028;22;2032;22;;;;;2031.5;0.0
0;100;RAINFOREST_RESIN;10002;1;10000;2;9998;4;10004;1;10005;21;;;10003.0;0.0
0;200;SQUID_INK;1966;1;1965;21;;;1969;22;;;;;1967.5;2.9150390625
0;200;RAINFOREST_RESIN;9996;1;9995;21;;;10004;1;10005;21;;;10000.0;2.0
0;200;KELP;2029;1;2028;21;;;2032;22;;;;;2030.5;0.80419921875
0;300;SQUID_INK;1967;1;1965;26;;;1968;26;;;;;1967.5;4.634521484375
0;300;KELP;2031;1;2029;26;;;2032;26;;;;;2031.5;1.376220703125
0;300;RAINFOREST_RESIN;9995;26;;;;;10005;26;;;;;10000.0;5.0
0;400;RAINFOREST_RESIN;9998;8;9996;2;9995;26;10004;2;10005;26;;;10001.0;5.0
0;400;KELP;2029;2;2028;26;;;2032;28;;;;;2030.5;2.5263671875
0;400;SQUID_INK;1966;28;;;;;1969;28;;;;;1967.5;2.3427734375
0;500;SQUID_INK;1966;24;;;;;1968;3;1970;24;;;1967.0;0.755859375
0;500;KELP;2028;24;;;;;2030;3;2031;24;;;2029.0;3.74951171875
0;500;RAINFOREST_RESIN;9998;8;9996;1;9995;23;10004;1;10005;23;;;10001.0;5.0
0;600;SQUID_INK;1967;5;1965;30;;;1968;30;;;;;1967.5;4.7578125
0;600;RAINFOREST_RESIN;9996;2;9995;28;;;10004;2;10005;28;;;10000.0;5.0
0;600;KELP;2030;5;2028;30;;;2031;30;;;;;2030.5;3.0
0;700;SQUID_INK;1967;22;;;;;1970;23;;;;;1968.5;26.97265625
0;700;KELP;2028;22;;;;;2032;23;;;;;2030.0;17.021484375
0;700;RAINFOREST_RESIN;9996;1;9995;22;;;10004;1;10005;22;;;10000.0;5.0
0;800;RAINFOREST_RESIN;9996;1;9995;24;;;10000;3;10004;1;10005;24;9998.0;5.0
0;800;KELP;2028;25;;;;;2030;3;2032;25;;;2029.0;17.16015625
0;800;SQUID_INK;1967;25;;;;;1968;3;1970;25;;;1967.5;26.0234375




Trade History:
null